#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>
using namespace std;
const int MAX = 100000;
vector<int> graph[MAX];
bool visited[MAX];
void dfs(int node)
{
    stack<int> s;
    s.push(node);
    while (!s.empty())
    {
        int curr_node = s.top();
        if (!visited[curr_node])
        {
            visited[curr_node] = true;
            s.pop();
            cout << curr_node << " ";
#pragma omp parallel for
            for (int i = 0; i < graph[curr_node].size(); i++)
            {
                int adj_node = graph[curr_node][i];
                if (!visited[adj_node])
                {
                    s.push(adj_node);
                }
            }
        }
    }
}
int main()
{
    int n, m, start_node;
    cout << "Enter no. of Node,no. of Edges and Starting Node of graph:\n";
    cin >> n >> m >> start_node;
    cout << "Enter pair of node and edges:\n";
    for (int i = 0; i < m; i++)
    {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
#pragma omp parallel for
    for (int i = 0; i < n; i++)
    {
        visited[i] = false;
    }
    dfs(start_node);
    return 0;
}







The given code appears to implement a Depth-First Search (DFS) algorithm using a stack for traversal.
 It uses parallelization with OpenMP to potentially speed up the execution of the loop iterations.

Here's a breakdown of the code:

1. The necessary header files, including `<iostream>`, `<vector>`, `<stack>`, and `<omp.h>`, are included.

2. The code defines a constant `MAX` with a value of 100000, indicating the maximum number of nodes in the
 graph.

3. A vector of vectors `graph` is declared to represent the adjacency list of the graph.

4. An array `visited` is declared to keep track of visited nodes.

5. The `dfs` function is defined to perform the depth-first search. It takes a starting node as an 
argument.

6. Inside the `dfs` function, a stack `s` is declared and the starting node is pushed onto the stack.

7. The main loop of the DFS starts with a `while` loop that runs until the stack becomes empty.

8. Inside the loop, the top element of the stack is retrieved using `top()` function and stored 
in `curr_node`.

9. If the current node is not visited (`visited[curr_node] == false`), it is marked as visited, 
and then it is popped from the stack using `pop()`.

10. The current node is printed using `cout`.

11. The loop following the `cout` statement uses OpenMP's parallelization (`#pragma omp parallel for`)
 to potentially speed up the loop iterations. It iterates over the adjacent nodes of the current node 
and pushes them onto the stack if they are not visited.

12. The `main` function begins by taking input for the number of nodes (`n`), number of edges (`m`), 
and the starting node of the graph (`start_node`).

13. Next, a loop is used to take input for each pair of nodes and edges, and the graph is constructed 
accordingly by adding edges to the adjacency list.

14. Another loop initializes the `visited` array to `false` for all nodes.

15. The `dfs` function is called with the `start_node` as an argument to initiate the depth-first search.

16. Finally, the `main` function returns 0, indicating successful execution.

It's worth noting that the parallelization with OpenMP in this code might not necessarily provide any 
performance benefit due to the nature of the DFS algorithm, which inherently has sequential dependencies.
 Parallelization may not yield correct results in this case because multiple threads might access and 
modify the `visited` array concurrently. Therefore, caution should be exercised when attempting to 
parallelize such algorithms.