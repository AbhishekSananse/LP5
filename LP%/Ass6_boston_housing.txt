import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt
from sklearn import metrics
(x_train, y_train), (x_test, y_test) = mnist.load_data()
plt.imshow(x_train[0], cmap='gray')
plt.show()
print(x_train[0])


print("X_train shape", x_train.shape)
print("y_train shape", y_train.shape)
print("X_test shape", x_test.shape)
print("y_test shape", y_test.shape)


x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255


num_classes = 10
y_train = np.eye(num_classes)[y_train]
y_test = np.eye(num_classes)[y_test]


model = Sequential()
model.add(Dense(512, activation='relu', input_shape=(784,)))
model.add(Dropout(0.2))
model.add(Dense(512, activation='relu'))  
model.add(Dropout(0.2))
model.add(Dense(num_classes, activation='softmax'))


model.compile(loss='categorical_crossentropy',    
              optimizer=RMSprop(),
              metrics=['accuracy'])


batch_size = 128
epochs = 20
history = model.fit(x_train, y_train,
                    batch_size=batch_size,
                    epochs=epochs,
                    verbose=1, 
                    validation_data=(x_test, y_test))


score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])







Linear regression is a statistical modeling technique used to establish a relationship 
between a dependent variable and one or more independent variables. 
It assumes a linear relationship between the variables, meaning that the dependent 
variable can be predicted as a linear combination of the independent variables.

Linear regression can also be implemented using a deep neural network (DNN), although 
it may not be the most common or efficient approach. 
Typically, deep neural networks are used for more complex tasks such as classification 
or regression with nonlinear relationships. 
However, if you have specific reasons or constraints for using a DNN for linear regression, 
it is possible to do so.

Deep neural networks (DNNs) are a type of artificial neural network (ANN) that consists 
of multiple layers of interconnected neurons. 
They are called "deep" because they typically have more than one hidden layer between 
the input and output layers, allowing for a more complex representation of data.

